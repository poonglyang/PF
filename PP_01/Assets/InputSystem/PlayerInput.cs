//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Kema"",
            ""id"": ""e0dc10bf-b404-47b2-aad7-634840f10715"",
            ""actions"": [
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""b0bcaa5d-ce5b-42fc-bcfa-6038e8c6d49e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""273fc76c-c519-4e70-84d2-cf4ff0c9faed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arrow"",
                    ""type"": ""Value"",
                    ""id"": ""66563dd7-328e-40d2-a5ad-ec938cd673ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Button"",
                    ""id"": ""ee1ce511-1574-458f-ab66-ecf32793a6f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Button"",
                    ""id"": ""f5385cca-0a1e-4543-a3fa-176a8c466f94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill3"",
                    ""type"": ""Button"",
                    ""id"": ""f789cd3c-cb0a-4af5-805d-f854c49bdc7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb55389b-e186-4dc0-a95c-f9458475d51f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeMa"",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5427c786-0c6e-41e6-98c1-96e93caabd61"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7341a0df-6226-4b4b-a72a-6fc6fce19356"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cf760802-992e-4c27-b156-ab015cc9d4a4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6044cfd2-f260-44e2-8595-28bbe926c9a4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6de6c730-70a5-4313-a0e7-fd1f709d5f98"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""403a26da-a327-4278-b612-da1a17f56daa"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5ad6c38d-db95-4a9c-b334-ad534ca81856"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32ef9641-951c-43d6-9a2d-4d54bdfe236d"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ffce5ab-1f45-4e3e-91db-69728061b721"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeMa"",
            ""bindingGroup"": ""KeMa"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Kema
        m_Kema = asset.FindActionMap("Kema", throwIfNotFound: true);
        m_Kema_LeftArrow = m_Kema.FindAction("LeftArrow", throwIfNotFound: true);
        m_Kema_RightArrow = m_Kema.FindAction("RightArrow", throwIfNotFound: true);
        m_Kema_Arrow = m_Kema.FindAction("Arrow", throwIfNotFound: true);
        m_Kema_Skill1 = m_Kema.FindAction("Skill1", throwIfNotFound: true);
        m_Kema_Skill2 = m_Kema.FindAction("Skill2", throwIfNotFound: true);
        m_Kema_Skill3 = m_Kema.FindAction("Skill3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Kema
    private readonly InputActionMap m_Kema;
    private List<IKemaActions> m_KemaActionsCallbackInterfaces = new List<IKemaActions>();
    private readonly InputAction m_Kema_LeftArrow;
    private readonly InputAction m_Kema_RightArrow;
    private readonly InputAction m_Kema_Arrow;
    private readonly InputAction m_Kema_Skill1;
    private readonly InputAction m_Kema_Skill2;
    private readonly InputAction m_Kema_Skill3;
    public struct KemaActions
    {
        private @PlayerInput m_Wrapper;
        public KemaActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftArrow => m_Wrapper.m_Kema_LeftArrow;
        public InputAction @RightArrow => m_Wrapper.m_Kema_RightArrow;
        public InputAction @Arrow => m_Wrapper.m_Kema_Arrow;
        public InputAction @Skill1 => m_Wrapper.m_Kema_Skill1;
        public InputAction @Skill2 => m_Wrapper.m_Kema_Skill2;
        public InputAction @Skill3 => m_Wrapper.m_Kema_Skill3;
        public InputActionMap Get() { return m_Wrapper.m_Kema; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KemaActions set) { return set.Get(); }
        public void AddCallbacks(IKemaActions instance)
        {
            if (instance == null || m_Wrapper.m_KemaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KemaActionsCallbackInterfaces.Add(instance);
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
            @Arrow.started += instance.OnArrow;
            @Arrow.performed += instance.OnArrow;
            @Arrow.canceled += instance.OnArrow;
            @Skill1.started += instance.OnSkill1;
            @Skill1.performed += instance.OnSkill1;
            @Skill1.canceled += instance.OnSkill1;
            @Skill2.started += instance.OnSkill2;
            @Skill2.performed += instance.OnSkill2;
            @Skill2.canceled += instance.OnSkill2;
            @Skill3.started += instance.OnSkill3;
            @Skill3.performed += instance.OnSkill3;
            @Skill3.canceled += instance.OnSkill3;
        }

        private void UnregisterCallbacks(IKemaActions instance)
        {
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
            @Arrow.started -= instance.OnArrow;
            @Arrow.performed -= instance.OnArrow;
            @Arrow.canceled -= instance.OnArrow;
            @Skill1.started -= instance.OnSkill1;
            @Skill1.performed -= instance.OnSkill1;
            @Skill1.canceled -= instance.OnSkill1;
            @Skill2.started -= instance.OnSkill2;
            @Skill2.performed -= instance.OnSkill2;
            @Skill2.canceled -= instance.OnSkill2;
            @Skill3.started -= instance.OnSkill3;
            @Skill3.performed -= instance.OnSkill3;
            @Skill3.canceled -= instance.OnSkill3;
        }

        public void RemoveCallbacks(IKemaActions instance)
        {
            if (m_Wrapper.m_KemaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKemaActions instance)
        {
            foreach (var item in m_Wrapper.m_KemaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KemaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KemaActions @Kema => new KemaActions(this);
    private int m_KeMaSchemeIndex = -1;
    public InputControlScheme KeMaScheme
    {
        get
        {
            if (m_KeMaSchemeIndex == -1) m_KeMaSchemeIndex = asset.FindControlSchemeIndex("KeMa");
            return asset.controlSchemes[m_KeMaSchemeIndex];
        }
    }
    public interface IKemaActions
    {
        void OnLeftArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnArrow(InputAction.CallbackContext context);
        void OnSkill1(InputAction.CallbackContext context);
        void OnSkill2(InputAction.CallbackContext context);
        void OnSkill3(InputAction.CallbackContext context);
    }
}
