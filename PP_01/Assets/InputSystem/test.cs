//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/test.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Test: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Test()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""test"",
    ""maps"": [
        {
            ""name"": ""testButton"",
            ""id"": ""0b65b20b-903d-46ab-80e0-ca10623fcaa1"",
            ""actions"": [
                {
                    ""name"": ""Button1"",
                    ""type"": ""Button"",
                    ""id"": ""b0f3604b-f15b-4cf2-ae4f-01a95bb5c5e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button2"",
                    ""type"": ""Button"",
                    ""id"": ""3bd4dea3-0f66-4ee7-8879-aae989484aa9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button3"",
                    ""type"": ""Button"",
                    ""id"": ""ffecd506-9b5b-43e1-ba8a-8e72387cf440"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button4"",
                    ""type"": ""Button"",
                    ""id"": ""897163a2-6889-44d9-a83e-410105123996"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button5"",
                    ""type"": ""Button"",
                    ""id"": ""d95f0695-75f7-451b-a046-7de12d3cc365"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button6"",
                    ""type"": ""Button"",
                    ""id"": ""132b6b66-b9e9-4d02-997d-8a93a2d7e1c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a483e444-c6a6-4c70-812c-1392922e59d3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeMa"",
                    ""action"": ""Button1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73a113eb-c3da-41c9-b6d8-b95f5da14c3c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeMa"",
                    ""action"": ""Button2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a968a80a-a180-4b54-8353-a3333b44a8a2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeMa"",
                    ""action"": ""Button3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca3db5e1-8c29-438d-ba46-8006adda94ed"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""468fcdf3-7c4e-41b1-babe-9b880edaf59f"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddff3ef8-cba2-4f0e-a939-eca4632914b6"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeMa"",
            ""bindingGroup"": ""KeMa"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // testButton
        m_testButton = asset.FindActionMap("testButton", throwIfNotFound: true);
        m_testButton_Button1 = m_testButton.FindAction("Button1", throwIfNotFound: true);
        m_testButton_Button2 = m_testButton.FindAction("Button2", throwIfNotFound: true);
        m_testButton_Button3 = m_testButton.FindAction("Button3", throwIfNotFound: true);
        m_testButton_Button4 = m_testButton.FindAction("Button4", throwIfNotFound: true);
        m_testButton_Button5 = m_testButton.FindAction("Button5", throwIfNotFound: true);
        m_testButton_Button6 = m_testButton.FindAction("Button6", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // testButton
    private readonly InputActionMap m_testButton;
    private List<ITestButtonActions> m_TestButtonActionsCallbackInterfaces = new List<ITestButtonActions>();
    private readonly InputAction m_testButton_Button1;
    private readonly InputAction m_testButton_Button2;
    private readonly InputAction m_testButton_Button3;
    private readonly InputAction m_testButton_Button4;
    private readonly InputAction m_testButton_Button5;
    private readonly InputAction m_testButton_Button6;
    public struct TestButtonActions
    {
        private @Test m_Wrapper;
        public TestButtonActions(@Test wrapper) { m_Wrapper = wrapper; }
        public InputAction @Button1 => m_Wrapper.m_testButton_Button1;
        public InputAction @Button2 => m_Wrapper.m_testButton_Button2;
        public InputAction @Button3 => m_Wrapper.m_testButton_Button3;
        public InputAction @Button4 => m_Wrapper.m_testButton_Button4;
        public InputAction @Button5 => m_Wrapper.m_testButton_Button5;
        public InputAction @Button6 => m_Wrapper.m_testButton_Button6;
        public InputActionMap Get() { return m_Wrapper.m_testButton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestButtonActions set) { return set.Get(); }
        public void AddCallbacks(ITestButtonActions instance)
        {
            if (instance == null || m_Wrapper.m_TestButtonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestButtonActionsCallbackInterfaces.Add(instance);
            @Button1.started += instance.OnButton1;
            @Button1.performed += instance.OnButton1;
            @Button1.canceled += instance.OnButton1;
            @Button2.started += instance.OnButton2;
            @Button2.performed += instance.OnButton2;
            @Button2.canceled += instance.OnButton2;
            @Button3.started += instance.OnButton3;
            @Button3.performed += instance.OnButton3;
            @Button3.canceled += instance.OnButton3;
            @Button4.started += instance.OnButton4;
            @Button4.performed += instance.OnButton4;
            @Button4.canceled += instance.OnButton4;
            @Button5.started += instance.OnButton5;
            @Button5.performed += instance.OnButton5;
            @Button5.canceled += instance.OnButton5;
            @Button6.started += instance.OnButton6;
            @Button6.performed += instance.OnButton6;
            @Button6.canceled += instance.OnButton6;
        }

        private void UnregisterCallbacks(ITestButtonActions instance)
        {
            @Button1.started -= instance.OnButton1;
            @Button1.performed -= instance.OnButton1;
            @Button1.canceled -= instance.OnButton1;
            @Button2.started -= instance.OnButton2;
            @Button2.performed -= instance.OnButton2;
            @Button2.canceled -= instance.OnButton2;
            @Button3.started -= instance.OnButton3;
            @Button3.performed -= instance.OnButton3;
            @Button3.canceled -= instance.OnButton3;
            @Button4.started -= instance.OnButton4;
            @Button4.performed -= instance.OnButton4;
            @Button4.canceled -= instance.OnButton4;
            @Button5.started -= instance.OnButton5;
            @Button5.performed -= instance.OnButton5;
            @Button5.canceled -= instance.OnButton5;
            @Button6.started -= instance.OnButton6;
            @Button6.performed -= instance.OnButton6;
            @Button6.canceled -= instance.OnButton6;
        }

        public void RemoveCallbacks(ITestButtonActions instance)
        {
            if (m_Wrapper.m_TestButtonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestButtonActions instance)
        {
            foreach (var item in m_Wrapper.m_TestButtonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestButtonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestButtonActions @testButton => new TestButtonActions(this);
    private int m_KeMaSchemeIndex = -1;
    public InputControlScheme KeMaScheme
    {
        get
        {
            if (m_KeMaSchemeIndex == -1) m_KeMaSchemeIndex = asset.FindControlSchemeIndex("KeMa");
            return asset.controlSchemes[m_KeMaSchemeIndex];
        }
    }
    public interface ITestButtonActions
    {
        void OnButton1(InputAction.CallbackContext context);
        void OnButton2(InputAction.CallbackContext context);
        void OnButton3(InputAction.CallbackContext context);
        void OnButton4(InputAction.CallbackContext context);
        void OnButton5(InputAction.CallbackContext context);
        void OnButton6(InputAction.CallbackContext context);
    }
}
